/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                    16 BIT PERIPHERAL TEMPLATE                             */
/*---------------------------------------------------------------------------*/
/* Test the 16 bit peripheral template:                                      */
/*                                     - Read/Write register access.         */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev$                                                                */
/* $LastChangedBy$                                          */
/* $LastChangedDate$          */
/*===========================================================================*/

.include "pmem_defs.asm"

.global main
	/* --------------     SET device register reference --------------- */
.equ START_ADDR_REG	, 0x0100         ; Use EQU for constants, SET for variables
.equ N_WORDS_REG	, 0x0102;
.equ CONFIG_REG		, 0x0104;
.equ DATA_REG	    , 0x0106;
	/* --------------     Device instruction set      --------------- */
.equ WRITE_OP       , 0x0001;
.equ READ_OP        , 0x0005;
.equ END_WRITE      , 0x8000;
.equ END_READ       , 0x8004;
   /* --------------     Values of START_ADD and NUM_WORDS  --------- */
.set START_ADD      , DMEM_200
.set N_WORDS        , 0x0004
main:

        /* --------------     START TEST: 'write-to-mem' and 'read-from-mem' accesses     --------------- */

	   mov    #START_ADD , &START_ADDR_REG 
	   mov    #N_WORDS   , &N_WORDS_REG ; Config the number of words
	   mov    #0x3333    , &DATA_REG    ; Try to wirte in data_reg read-only register. It should fail. 
	   mov    #WRITE_OP  , &CONFIG_REG  ; Setup a write-to-mem op.
	   mov    #0x0001    , r15          ; Start Write-op
	   
LOOP1: cmp.w  #END_WRITE , &CONFIG_REG     
	   jne    LOOP1                    ; loops until end_op.
	   mov    #0x0002    , r15         ; End of write-op, start read-op
	   mov    #0x0005    , &CONFIG_REG ; Setup a read-from-mem op.
	   
LOOP2: cmp.w  #END_READ  , &CONFIG_REG ;      
	   jne    LOOP2                    ; loops until end_op.	   
	   mov    #0x0003   , r15          ; End of read-op


        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
